{"version":3,"file":"static/js/586.c838c9fd.chunk.js","mappings":"kPAyCA,EAnCa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAaA,OAZAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,cAAkBN,GACfO,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACFA,EAAKC,KAAKC,OAIfN,EAAYI,EAAKC,MAHfE,EAAAA,GAAAA,KAAW,eAId,IACAC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMG,QAAtB,GACf,GAAE,CAAChB,KAGF,wBACGG,EAASc,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,GAAIC,EAAlB,EAAkBA,cAAeC,EAAjC,EAAiCA,aAAjC,OACZ,0BACGA,IACC,gBACEC,MAAM,MACNC,IAAG,yCAAoCF,GACvCG,IAAKJ,KAGT,uBAAIA,KACJ,uBAAIF,MATGC,EADG,KAenB,C,2GCrCKM,EAAQ,+BACRC,EAAU,mCAWVC,EAAiB,mCAAG,oGAQDC,IAAAA,IAAA,UAClBH,EADkB,uCACqBC,IATpB,cAQlBG,EARkB,yBAYjBA,GAZiB,2CAAH,qDAiBjBC,EAAgB,mCAAG,WAAOC,EAAOC,GAAd,uFACAJ,IAAAA,IAAA,UAClBH,EADkB,mEACiDC,EADjD,iBACiEM,EADjE,kBAC+ED,IAF/E,cACjBF,EADiB,yBAKhBA,GALgB,2CAAH,wDAUhBI,EAAa,mCAAG,WAAMjC,GAAN,uFACG4B,IAAAA,IAAA,UAClBH,EADkB,kBACAzB,EADA,oBACmB0B,EADnB,oBADH,cACdG,EADc,yBAKbA,GALa,2CAAH,sDAUbK,EAAa,mCAAG,WAAMlC,GAAN,uFACG4B,IAAAA,IAAA,UAClBH,EADkB,kBACAzB,EADA,4BAC2B0B,EAD3B,oBADH,cACdG,EADc,yBAKbA,GALa,2CAAH,sDAUbM,EAAgB,mCAAG,WAAMnC,GAAN,uFACA4B,IAAAA,IAAA,UAClBH,EADkB,kBACAzB,EADA,4BAC2B0B,EAD3B,2BADA,cACjBG,EADiB,yBAKhBA,GALgB,2CAAH,sDAQTvB,EAAM,CACjB6B,iBAAAA,EACAD,cAAAA,EACAD,cAAAA,EACAH,iBAAAA,EACAH,kBAAAA,E","sources":["pages/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { API } from 'services/api';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [castInfo, setCastInfo] = useState([]);\n  useEffect(() => {\n    API.fetchFilmCast(movieId)\n      .then(({ data }) => {\n        if (!data.cast.length) {\n          toast.warn('No cast info');\n          return;\n        }\n        setCastInfo(data.cast);\n      })\n      .catch(error => console.log(error.message));\n  }, [movieId]);\n\n  return (\n    <ul>\n      {castInfo.map(({ character, id, original_name, profile_path }) => (\n        <li key={id}>\n          {profile_path && (\n            <img\n              width=\"120\"\n              src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n              alt={original_name}\n            />\n          )}\n          <p>{original_name}</p>\n          <p>{character}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = `https://api.themoviedb.org/3`;\nconst API_KEY = 'd70849b39c7b399ded2dffef6ee1baa4';\n\n// const filmApi = axios.create({\n//   baseURL: `https://api.themoviedb.org/3`,\n//   params: {\n//     key: '29319280-d70849b39c7b399ded2dffef6ee1baa4',\n//   },\n// });\n\n////// TRENDING //////\n\nconst fetchFilmTrending = async () => {\n  //   const params = {\n  //     media_type: 'movie',\n  //     time_window: 'day',\n  //   };\n\n  //   const response = filmApi.get('/', { params });\n\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  return response;\n};\n\n////// QUERY //////\n\nconst fetchFilmByQuery = async (query, page) => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?&language=en-U&include_adult=true&api_key=${API_KEY}&page=${page}&query=${query}`\n  );\n\n  return response;\n};\n\n////// ID //////\n\nconst fetchFilmByID = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response;\n};\n\n////// CAST //////\n\nconst fetchFilmCast = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response;\n};\n\n////// REVIEWS //////\n\nconst fetchFilmReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return response;\n};\n\nexport const API = {\n  fetchFilmReviews,\n  fetchFilmCast,\n  fetchFilmByID,\n  fetchFilmByQuery,\n  fetchFilmTrending,\n};\n"],"names":["movieId","useParams","useState","castInfo","setCastInfo","useEffect","API","then","data","cast","length","toast","catch","error","console","log","message","map","character","id","original_name","profile_path","width","src","alt","BASE_URL","API_KEY","fetchFilmTrending","axios","response","fetchFilmByQuery","query","page","fetchFilmByID","fetchFilmCast","fetchFilmReviews"],"sourceRoot":""}