{"version":3,"file":"static/js/955.98d77dda.chunk.js","mappings":"kPAmCA,EA7BgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,iBAAqBN,GAClBO,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACFA,EAAKC,QAAQC,OAIlBN,EAAWI,EAAKC,SAHdE,EAAAA,GAAAA,KAAW,aAId,IAEAC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMG,QAAtB,GACf,GAAE,CAAChB,KAGF,wBACGG,EAAQc,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,GAAIC,EAAf,EAAeA,QAAf,OACX,2BACE,uBAAIF,GAAkB,aACtB,uBAAIE,MAFGD,EADE,KAQlB,C,2GC/BKE,EAAQ,+BACRC,EAAU,mCAWVC,EAAiB,mCAAG,oGAQDC,IAAAA,IAAA,UAClBH,EADkB,uCACqBC,IATpB,cAQlBG,EARkB,yBAYjBA,GAZiB,2CAAH,qDAiBjBC,EAAgB,mCAAG,WAAOC,EAAOC,GAAd,uFACAJ,IAAAA,IAAA,UAClBH,EADkB,mEACiDC,EADjD,iBACiEM,EADjE,kBAC+ED,IAF/E,cACjBF,EADiB,yBAKhBA,GALgB,2CAAH,wDAUhBI,EAAa,mCAAG,WAAM7B,GAAN,uFACGwB,IAAAA,IAAA,UAClBH,EADkB,kBACArB,EADA,oBACmBsB,EADnB,oBADH,cACdG,EADc,yBAKbA,GALa,2CAAH,sDAUbK,EAAa,mCAAG,WAAM9B,GAAN,uFACGwB,IAAAA,IAAA,UAClBH,EADkB,kBACArB,EADA,4BAC2BsB,EAD3B,oBADH,cACdG,EADc,yBAKbA,GALa,2CAAH,sDAUbM,EAAgB,mCAAG,WAAM/B,GAAN,uFACAwB,IAAAA,IAAA,UAClBH,EADkB,kBACArB,EADA,4BAC2BsB,EAD3B,2BADA,cACjBG,EADiB,yBAKhBA,GALgB,2CAAH,sDAQTnB,EAAM,CACjByB,iBAAAA,EACAD,cAAAA,EACAD,cAAAA,EACAH,iBAAAA,EACAH,kBAAAA,E","sources":["pages/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { API } from 'services/api';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    API.fetchFilmReviews(movieId)\n      .then(({ data }) => {\n        if (!data.results.length) {\n          toast.warn('No reviews');\n          return;\n        }\n        setReviews(data.results);\n      })\n\n      .catch(error => console.log(error.message));\n  }, [movieId]);\n\n  return (\n    <ul>\n      {reviews.map(({ author, id, content }) => (\n        <li key={id}>\n          <p>{author ? author : 'no name'}</p>\n          <p>{content}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst BASE_URL = `https://api.themoviedb.org/3`;\nconst API_KEY = 'd70849b39c7b399ded2dffef6ee1baa4';\n\n// const filmApi = axios.create({\n//   baseURL: `https://api.themoviedb.org/3`,\n//   params: {\n//     key: '29319280-d70849b39c7b399ded2dffef6ee1baa4',\n//   },\n// });\n\n////// TRENDING //////\n\nconst fetchFilmTrending = async () => {\n  //   const params = {\n  //     media_type: 'movie',\n  //     time_window: 'day',\n  //   };\n\n  //   const response = filmApi.get('/', { params });\n\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  return response;\n};\n\n////// QUERY //////\n\nconst fetchFilmByQuery = async (query, page) => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?&language=en-U&include_adult=true&api_key=${API_KEY}&page=${page}&query=${query}`\n  );\n\n  return response;\n};\n\n////// ID //////\n\nconst fetchFilmByID = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response;\n};\n\n////// CAST //////\n\nconst fetchFilmCast = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response;\n};\n\n////// REVIEWS //////\n\nconst fetchFilmReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return response;\n};\n\nexport const API = {\n  fetchFilmReviews,\n  fetchFilmCast,\n  fetchFilmByID,\n  fetchFilmByQuery,\n  fetchFilmTrending,\n};\n"],"names":["movieId","useParams","useState","reviews","setReviews","useEffect","API","then","data","results","length","toast","catch","error","console","log","message","map","author","id","content","BASE_URL","API_KEY","fetchFilmTrending","axios","response","fetchFilmByQuery","query","page","fetchFilmByID","fetchFilmCast","fetchFilmReviews"],"sourceRoot":""}